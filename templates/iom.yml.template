kind: Deployment
apiVersion: apps/v1
metadata:
  name: iom
  labels:
    app: iom
spec:
  replicas: 1
  selector:
    matchLabels:
      app: iom
  template:
    metadata:
      labels:
        app: iom
    spec:
      volumes:
${VolumeSpecAppDev}
      containers:
      - name: iom
        image: ${IOM_APP_IMAGE}
        # image: docker-build.rnd.intershop.de/intershop/iom-app:2.15.0.0-SNAPSHOT
        imagePullPolicy: ${IMAGE_PULL_POLICY}
        readinessProbe:
          httpGet:
            path: /monitoring/services/health/status
            port: ${PORT_IOM}
          failureThreshold: 1
          periodSeconds: 10
          initialDelaySeconds: 150
          timeoutSeconds: 8
          successThreshold: 1
        volumeMounts:
${VolumeMountAppDev}
        env:
          - name: TENANT
            value: Intershop
          - name: ENVIRONMENT
            value: 'iom local minikube'
          - name: OMS_DB_HOSTLIST
            value: postgres-service:${PORT_DB}
          - name: OMS_DB_PASS
            value: '${DB_PASSWORD}'
          - name: OMS_DB_USER
            value: '${DB_USER}'
          - name: OMS_DB_NAME
            value: '${DB_NAME}'
          - name: OMS_DB_PORT
            value: '${FORWARD_PORT_DB}'
          - name: OMS_SHAREDFS_HEALTHCHECK
            value: disabled
          - name: OMS_LOGLEVEL_CONSOLE
            value: '${OMS_LOGLEVEL_CONSOLE}'
          - name: OMS_LOGLEVEL_IOM
            value: '${OMS_LOGLEVEL_IOM}'
          - name: OMS_LOGLEVEL_HIBERNATE
            value: '${OMS_LOGLEVEL_HIBERNATE}'
          - name: OMS_LOGLEVEL_QUARTZ
            value: '${OMS_LOGLEVEL_QUARTZ}'
          - name: OMS_LOGLEVEL_CUSTOMIZATION
            value: '${OMS_LOGLEVEL_CUSTOMIZATION}'
          - name: OMS_LOGLEVEL_SCRIPTS
            value: '${OMS_LOGLEVEL_SCRIPTS}'
          - name: CAAS_ENV_NAME
            value: 'ci'
          - name: OMS_WILDFLY_READY_TIMEOUT
            value: '500'
          - name: OMS_PUBLIC_URL
            value: 'http://localhost'
          - name: OMS_EXEC_BACKEND_APPS
            value: 'true'
          - name: OMS_SHARE
            value: '${OmsShareDir}'
        lifecycle:
          postStart:
            exec:
              command: ["/opt/oms/bin/iom_start_handler.sh"]
        # volumeMounts:
        # - mountPath: "/var/opt/share-test"
        #   name: volume
      initContainers:
        - name: dbaccount
          imagePullPolicy: ${IMAGE_PULL_POLICY}
          image: ${IOM_DBACCOUNT_IMAGE}
          # image: docker-build.rnd.intershop.de/intershop/iom-dbaccount:1.0.0.0-SNAPSHOT
          env:
            - name: TENANT
              value: Intershop
            - name: ENVIRONMENT
              value: 'iom local minikube'
            - name: PGHOST
              value: postgres-service
            - name: PGPORT
              value: '${FORWARD_PORT_DB}'
            - name: PGPASSWORD
              value: postgres
            - name: OMS_DB_PASS
              value: '${DB_PASSWORD}'
            - name: OMS_DB_OPTIONS
              value: "ENCODING='UTF8' LC_COLLATE='en_US.utf8' LC_CTYPE='en_US.utf8' CONNECTION LIMIT=-1"
            - name: OMS_LOGLEVEL_SCRIPTS
              value: '${OMS_LOGLEVEL_SCRIPTS}'
        - name: dbinit
          imagePullPolicy: ${IMAGE_PULL_POLICY}
          image: ${IOM_DBINIT_IMAGE}
          # image: docker-build.rnd.intershop.de/intershop/iom-dbinit:2.15.0.0-SNAPSHOT
          env:
            - name: TENANT
              value: Intershop
            - name: ENVIRONMENT
              value: 'iom local minikube'
            - name: OMS_DB_HOST
              value: postgres-service
            - name: OMS_DB_PORT
              value: '${FORWARD_PORT_DB}'
            - name: OMS_DB_PASS
              value: '${DB_PASSWORD}'
            - name: OMS_LOGLEVEL_SCRIPTS
              value: '${OMS_LOGLEVEL_SCRIPTS}'
---
kind: Service
apiVersion: v1
metadata:
  name: iom-service
spec:
  selector:
    app: iom
  ports:
    - name: http
      port: ${FORWARD_PORT_IOM}
      targetPort: ${PORT_IOM}
    - name: admin
      port: ${FORWARD_PORT_WILDFLY}
      targetPort: ${PORT_WILDFLY}
  type: LoadBalancer
