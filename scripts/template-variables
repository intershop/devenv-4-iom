################################################################################
# Defaults
#
# The following section defines useful defaults for all variables that could be
# used with the template_engine.sh script.
################################################################################

# used for calculation of automatic port forwarding
INDEX="${INDEX:-0}"
PORT_OFFSET="${PORT_OFFSET:-10}"

# environment specific configuration defaults to '', which just applies base
# configuration
CAAS_ENV_NAME="${CAAS_ENV_NAME:-}"

# pull policy defaults to Always, which makes it easy for developers get always
# the newest image
IMAGE_PULL_POLICY="${IMAGE_PULL_POLICY:-Always}"

# Add volumes / mounts if the user wants to keep databse data or not.
if [ "$KEEP_DATABASE_DATA" = true ] ; then
    # as these variables are directly expanded within yaml-file,
    # the leading spaces have to match correctly!
    VolumeSpecDbData="
  - name: db-data
    persistentVolumeClaim:
      claimName: postgres-pvc"
    VolumeMountDbData="
    - name: db-data
      mountPath: /var/lib/postgresql/data"
fi

# directory containing custom built artifacts
# has to be empty on default, in order to become able to make the distinction
# whether the user wants to deploy custom built artifacts or not.
if [ $(OS) == "Msys" -a ! -z "$CUSTOM_APPS_DIR" ]; then
  CUSTOM_APPS_DIR=$(cygpath -u "$CUSTOM_APPS_DIR")
fi
# create yaml code depending on CUSTOM_APPS_DIR
if [ ! -z "$CUSTOM_APPS_DIR" ]; then
    # as these variables are directly expanded within yaml-file,
    # the leading spaces have to match correctly!
    VolumeSpecAppDev="
      - name: application-dev
        hostPath:
          path: ${CUSTOM_APPS_DIR}"
    VolumeMountAppDev="
        - name: application-dev
          mountPath: /opt/oms/application-dev"
fi        

# directory containing custom mail templates
# has to be empty on default, in order to become able to make the distinction
# whether the user wants to test custom templates or not.
if [ $(OS) == "Msys" -a ! -z "$CUSTOM_TEMPLATES_DIR" ]; then
    CUSTOM_TEMPLATES_DIR=$(cygpath -u "$CUSTOM_TEMPLATES_DIR")
fi
# create yaml code depending on CUSTOM_TEMPLATES_DIR
if [ ! -z "$CUSTOM_TEMPLATES_DIR" ]; then
    # as these variables are directly expanded within yaml-file,
    # the leading spaces have to match correctly!
    VolumeSpecTemplatesDev="
      - name: templates-dev
        hostPath:
          path: ${CUSTOM_TEMPLATES_DIR}"
    VolumeMountTemplatesDev="
        - name: templates-dev
          mountPath: /opt/oms/templates-dev"
fi

# directory containing custom xsl templates
# has to be empty on default, in order to become able to make the distinction
# whether the user wants to test custom xsl templates or not.
if [ $(OS) == "Msys" -a ! -z "$CUSTOM_XSLT_DIR" ]; then
    CUSTOM_XSLT_DIR=$(cygpath -u "$CUSTOM_XSLT_DIR")
fi
# create yaml code depending on CUSTOM_XSLT_DIR
if [ ! -z "$CUSTOM_XSLT_DIR" ]; then
    # as these variables are directly expanded within yaml-file,
    # the leading spaces have to match correctly!
    VolumeSpecXsltDev="
      - name: xslt-dev
        hostPath:
          path: ${CUSTOM_XSLT_DIR}"
    VolumeMountXsltDev="
        - name: xslt-dev
          mountPath: /opt/oms/xslt-dev"
fi

# directory to be used as share
# has to be empty on default, in order to become able to make the distinction
# whether the user wants to use a custom share or not.
if [ $(OS) == "Msys" -a ! -z "$CUSTOM_SHARE_DIR" ]; then
    CUSTOM_SHARE_DIR=$(cygpath -u "$CUSTOM_SHARE_DIR")
fi
# create yaml code depending on CUSTOM_SHARE_DIR
if [ ! -z "$CUSTOM_SHARE_DIR" ]; then
    # as these variables are directly expanded within yaml-file,
    # the leading spaces have to match correctly!
    VolumeSpecShareDev="
      - name: share-dev
        hostPath:
          path: ${CUSTOM_SHARE_DIR}"
    VolumeMountShareDev="
        - name: share-dev
          mountPath: /var/opt/share"
fi

# directory to be used as log directory
# has to be empty on default, in order to become able to make the distinction
# whether the user wants to use a custom log directory or not.
if [ $(OS) == "Msys" -a ! -z "$CUSTOM_LOG_DIR" ]; then
    CUSTOM_LOG_DIR=$(cygpath -u "$CUSTOM_LOG_DIR")
fi
# create yaml code depending on CUSTOM_LOG_DIR
if [ ! -z "$CUSTOM_LOG_DIR" ]; then
    # as these variables are directly expanded within yaml-file,
    # the leading spaces have to match correctly!
    VolumeSpecLogDev="
      - name: log-dev
        hostPath:
          path: ${CUSTOM_LOG_DIR}"
    VolumeMountLogDevContainer="
        - name: log-dev
          mountPath: /var/log/log-share"
    VolumeMountLogDevInitContainer="
          - name: log-dev
            mountPath: /var/log/log-share"
    EnvLogDevContainer="
          - name: LOG_SHARE
            value: '/var/log/log-share'"
    EnvLogDevInitContainer="
            - name: LOG_SHARE
              value: '/var/log/log-share'"
fi

# used as identifier for an IOM environment e.g. as Kubernetes namespace name 
EnvId=$(echo $ID | sed "s/[^A-Za-z0-9]*//g" | tr "[:upper:]" "[:lower:]")

CustomShareDirDefault="$ENV_DIR/share"
CustomLogDirDefault="$ENV_DIR/logs"

# set directory defaults depending on OS
# directory of the environment
if [ $(OS) == "Msys" ]; then
    CustomShareDirDefault=$(cygpath -w "${CustomShareDirDefault}")
    CustomLogDirDefault=$(cygpath -w "${CustomLogDirDefault}")
fi

# set IOM_APP_SRC_DIR depending on OS
# directory to be used to run the soap, geb and ws tests
if [ $(OS) == "Msys" -a ! -z "$IOM_APP_SRC_DIR" ]; then
    IOM_APP_SRC_DIR=$(cygpath -u "${IOM_APP_SRC_DIR}")
fi

# development host
HOST_IOM="${HOST_IOM:-$(hostname)}"

# paths
PROJECT_PATH="${PROJECT_PATH:-$(realpath $(dirname $(dirname $0)))}"

# ports
PORT_IOM="${PORT_IOM:-8080}"
PORT_DEBUG="${PORT_DEBUG:-8787}"
PORT_DB="${PORT_DB:-5432}"
PORT_WILDFLY="${PORT_WILDFLY:-9990}"
PORT_MAILHOG_UI="${PORT_MAILHOG_UI:-8025}"
PORT_MAILHOG_SMTP="${PORT_MAILHOG_SMTP:-1025}"

# database
DB_NAME="${DB_NAME:-oms_db}"
DB_USER="${DB_USER:-oms_user}"
DB_PASSWORD="${DB_PASSWORD:-oms_pw}"

# port forwarding (port number of according service)
# normally these ports are available inside the kubernetes cluster only,
# but except for Docker-Desktop.
FORWARD_PORT_IOM=$(($PORT_IOM + ($INDEX * $PORT_OFFSET)))
FORWARD_PORT_DEBUG=$(($PORT_DEBUG + ($INDEX * $PORT_OFFSET)))
FORWARD_PORT_DB=$(($PORT_DB + ($INDEX * $PORT_OFFSET)))
FORWARD_PORT_WILDFLY=$(($PORT_WILDFLY + ($INDEX * $PORT_OFFSET)))
FORWARD_PORT_MAILHOG_UI=$(($PORT_MAILHOG_UI + ($INDEX * $PORT_OFFSET)))
FORWARD_PORT_MAILHOG_SMTP=$(($PORT_MAILHOG_SMTP + ($INDEX * $PORT_OFFSET)))

PUBLIC_NODEPORT_BASE=32000

# public node port
# when not running on Docker-Desktop, the exposed node ports have to
# be used to access the services from outside the cluster. Access via Ingress is
# not an alternative, as ports of Ingress-controller (80,443) cannot be changed.
# When running with ICM on a single machine, this can easily lead to conflicts.
PUBLIC_NODEPORT_IOM=$(($PUBLIC_NODEPORT_BASE + 0 + ($INDEX * $PORT_OFFSET)))
PUBLIC_NODEPORT_DEBUG=$(($PUBLIC_NODEPORT_BASE + 1 + ($INDEX * $PORT_OFFSET)))
PUBLIC_NODEPORT_DB=$(($PUBLIC_NODEPORT_BASE + 2 + ($INDEX * $PORT_OFFSET)))
PUBLIC_NODEPORT_WILDFLY=$(($PUBLIC_NODEPORT_BASE + 3 + ($INDEX * $PORT_OFFSET)))
PUBLIC_NODEPORT_MAILHOG_UI=$(($PUBLIC_NODEPORT_BASE + 4 + ($INDEX * $PORT_OFFSET)))
PUBLIC_NODEPORT_MAILHOG_SMTP=$(($PUBLIC_NODEPORT_BASE + 5 + ($INDEX * $PORT_OFFSET)))

# paths
PROJECT_PATH="${PROJECT_PATH:-$(realpath $(dirname $(dirname $0)))}"
UNIX_PROJECT_PATH="${UNIX_PROJECT_PATH:-$(realpath $(dirname $(dirname $0)))}"

TIMEZONE="${TIMEZONE:-Europe/Berlin}"

# images
DOCKER_DB_IMAGE="${DOCKER_DB_IMAGE:-postgres:9.5}"
MAILHOG_IMAGE="${MAILHOG_IMAGE:-mailhog/mailhog}"
IOM_PSQL_IMAGE="${IOM_PSQL_IMAGE:-docker-build.rnd.intershop.de/intershop/iom-psql:3.10}"
IOM_DBACCOUNT_IMAGE="${IOM_DBACCOUNT_IMAGE:-docker-build.rnd.intershop.de/intershop/iom-dbaccount:1.0.0.0-SNAPSHOT}"
IOM_DBINIT_IMAGE="${IOM_DBINIT_IMAGE:-docker-build.rnd.intershop.de/intershop/iom-dbinit:2.16.0.0-SNAPSHOT}"
IOM_APP_IMAGE="${IOM_APP_IMAGE:-docker-build.rnd.intershop.de/intershop/iom-app:2.16.0.0-SNAPSHOT}"


################################################################################
# Non-versioned commands and variables
#
# The following section defines general commands and variables.
################################################################################

if [ "$KEEP_DATABASE_DATA" = true ] ; then
    KeepDatabaseDocuStart=''
    KeepDatabaseDocuEnd=''
else
    KeepDatabaseDocuStart='<!--'
    KeepDatabaseDocuEnd='-->'
fi
