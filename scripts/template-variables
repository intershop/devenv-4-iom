################################################################################
# Defaults
#
# The following section defines useful defaults for all variables that could be
# used with the template_engine.sh script.
################################################################################

# used for calculation of automatic port forwarding
INDEX="${INDEX:-0}"
PORT_OFFSET="${PORT_OFFSET:-10}"

# pull policy defaults to Always, which makes it easy for developers get always
# the newest image
IMAGE_PULL_POLICY="${IMAGE_PULL_POLICY:-Always}"

# directory containing custom built artifacts
# has to be empty on default, in order to become able to make the distinction
# whether the user wants to deploy custom built artifacts or not.
if [ $(OS) == "Msys" -a ! -z "$CUSTOM_APPS_DIR" ]; then
  CUSTOM_APPS_DIR=$(cygpath -u "$CUSTOM_APPS_DIR")
fi
# create yaml code depending on CUSTOM_APPS_DIR
if [ ! -z "$CUSTOM_APPS_DIR" ]; then
    # as these variables are directly expanded within yaml-file,
    # the leading spaces have to match correctly!
    VolumeSpecAppDev="
     - name: application-dev
       hostPath:
         path: ${CUSTOM_APPS_DIR}"
     VolumeMountAppDev="
        - name: application-dev
          mountPath: /opt/oms/application-dev"
fi	  

# directory containing custom mail templates
# default value is valid for Minikube only
CUSTOM_TEMPLATES_DIR="${CUSTOM_TEMPLATES_DIR:-/opt/oms/templates-dev}"
if [ $(OS) == "Msys" ]; then
  CUSTOM_TEMPLATES_DIR=$(cygpath -u "$CUSTOM_TEMPLATES_DIR")
fi

# directory containing custom xsl templates
# default value is valid for Minikube only
CUSTOM_XSL_DIR="${CUSTOM_XSL_DIR:-/opt/oms/xsl-dev}"
if [ $(OS) == "Msys" ]; then
  CUSTOM_XSL_DIR=$(cygpath -u "$CUSTOM_XSL_DIR")
fi

# directory to be used as share
# default value must be empty to set dependend internal helper variable
# CommentShareDir correctly
CUSTOM_SHARE_DIR="${CUSTOM_SHARE_DIR:-}"
if [ $(OS) == "Msys" -a ! -z "$CUSTOM_SHARE_DIR" ]; then
    CUSTOM_SHARE_DIR=$(cygpath -u "$CUSTOM_SHARE_DIR")
fi
if [ -z "$CUSTOM_SHARE_DIR" ]; then
    OmsShareDir='/var/opt/share'
else
    OmsShareDir='/opt/oms/share-dev'
fi

EnvId=$(echo $ID | sed "s/[^A-Za-z0-9]*//g" | tr "[:upper:]" "[:lower:]")

# development host
HOST_IOM="${HOST_IOM:-$(hostname)}"

# paths
PROJECT_PATH="${PROJECT_PATH:-$(realpath $(dirname $(dirname $0)))}"

# ports
PORT_IOM="${PORT_IOM:-8080}"
PORT_DEBUG="${PORT_DEBUG:-8787}"
PORT_DB="${PORT_DB:-5432}"
PORT_WILDFLY="${PORT_WILDFLY:-9990}"

# database
DB_NAME="${DB_NAME:-oms_db}"
DB_USER="${DB_USER:-oms_user}"
DB_PASSWORD="${DB_PASSWORD:-oms_pw}"



# TODO check following variables

# paths
PROJECT_PATH="${PROJECT_PATH:-$(realpath $(dirname $(dirname $0)))}"
UNIX_PROJECT_PATH="${UNIX_PROJECT_PATH:-$(realpath $(dirname $(dirname $0)))}"
# DATABASE_MIGRATE_PATH=$(echo $(find ${SRC_DIR} -name "dbmigrate.sh") | sed "s|${SRC_DIR}|/tmp/src|g")

OMS_SKIP_BUSINESS_CONFIG="${OMS_SKIP_BUSINESS_CONFIG:--sb}"

TIMEZONE="${TIMEZONE:-Europe/Berlin}"





# docker
DOCKER_REGISTRY_HOST="${DOCKER_REGISTRY_HOST:-docker-build.rnd.intershop.de}"
DOCKER_IOM_IMAGE="${DOCKER_IOM_IMAGE:-iom/iom-trunk:2.4.0.0-SNAPSHOT}"
DOCKER_DB_IMAGE="${DOCKER_DB_IMAGE:-postgres:9.5}"
DOCKER_IOM_IMAGE_VERSION=$(echo $DOCKER_IOM_IMAGE | sed "s/^.*[^0-9]\([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\|latest\).*$/\1/")

COMPOSE_PROJECT_NAME=$(echo $ID | sed "s/[^A-Za-z0-9]*//g" | tr "[:upper:]" "[:lower:]")
COMPOSE_ETC_DIR=/etc/opt/oms.standalone
COMPOSE_APP_DIR=/opt/oms.standalone/application
COMPOSE_LOG_DIR=/var/opt/iom_standalone_log
COMPOSE_VAR_DIR=/var/opt/oms.standalone
COMPOSE_SHARE_DIR=

################################################################################
# Aliases
#
# The following section defines the aliases.
################################################################################

# docker-compose
DOCKER_COMPOSE_BASE_COMMAND_ALIAS=docker_compose_${ID}

# Setup
DOCKER_SETUP_PROVIDE_VAR_DIRECTORY_ALIAS=docker_${ID}_setup_provide_var_directory
DOCKER_SETUP_RECONFIGURE_ALIAS=docker_${ID}_setup_reconfigure

# Development
DOCKER_DEVELOPMENT_UNDEPLOY_ALIAS=docker_${ID}_development_undeploy
DOCKER_DEVELOPMENT_DEPLOY_ALIAS=docker_${ID}_development_deploy
DOCKER_DEVELOPMENT_REDEPLOY_ALIAS=docker_${ID}_development_redeploy

# Database
DOCKER_DATABASE_INIT_ALIAS=${DOCKER_COMPOSE_BASE_COMMAND_ALIAS}_database_init
DOCKER_DATABASE_MIGRATE_ALIAS=docker_${ID}_database_migrate
DOCKER_DATABASE_INIT_MIGRATE_CONFIG_ALIAS=docker_${ID}_database_init_migrate_config
DOCKER_DATABASE_CREATE_DUMP_ALIAS=docker_${ID}_database_create_dump
DOCKER_DATABASE_OPEN_PSQL_TERMINAL_ALIAS=docker_${ID}_database_open_psql_terminal

################################################################################
# Non-versioned commands and variables
#
# The following section defines general commands and variables.
################################################################################

# docker compose

DOCKER_COMPOSE_IMAGE_SUFFIX="-iom"
DOCKER_COMPOSE_DB_SERVICE_NAME="db"
DOCKER_COMPOSE_IOM_SERVICE_NAME="iom"
DOCKER_COMPOSE_BASE_COMMAND="export COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME} && INDEX=${INDEX} PORT_OFFSET=${PORT_OFFSET} TIMEZONE=${TIMEZONE} ID=${ID} ETC_DIR=${ETC_DIR} VAR_DIR=${VAR_DIR} SRC_DIR=${SRC_DIR} APP_DIR=${APP_DIR} LOG_DIR=${LOG_DIR} DB_NAME=${DB_NAME} DB_USER=${DB_USER} DB_PASSWORD=${DB_PASSWORD} DB_DUMP=${DB_DUMP} DOCKER_IOM_IMAGE=${DOCKER_IOM_IMAGE} DOCKER_DB_IMAGE=${DOCKER_DB_IMAGE} ${UNIX_PROJECT_PATH}/scripts/template_engine.sh ${UNIX_PROJECT_PATH}/templates/docker-compose.template | docker-compose -f -"

# IOM-8813
# >= 2.12.0.0
if ( version_ge $DOCKER_IOM_IMAGE_VERSION 2.12.0.0 )
then
  DOCKER_COMPOSE_BASE_COMMAND="export COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME} && INDEX=${INDEX} PORT_OFFSET=${PORT_OFFSET} TIMEZONE=${TIMEZONE} ID=${ID} ETC_DIR=${ETC_DIR} VAR_DIR=${VAR_DIR} SHARE_DIR=${SHARE_DIR} SRC_DIR=${SRC_DIR} APP_DIR=${APP_DIR} LOG_DIR=${LOG_DIR} DB_NAME=${DB_NAME} DB_USER=${DB_USER} DB_PASSWORD=${DB_PASSWORD} DB_DUMP=${DB_DUMP} DOCKER_IOM_IMAGE=${DOCKER_IOM_IMAGE} DOCKER_DB_IMAGE=${DOCKER_DB_IMAGE} ${UNIX_PROJECT_PATH}/scripts/template_engine.sh ${UNIX_PROJECT_PATH}/templates/docker-compose.template | docker-compose -f -"
fi

# port forwarding
FORWARD_PORT_IOM=$(($PORT_IOM + ($INDEX * $PORT_OFFSET)))
FORWARD_PORT_DEBUG=$(($PORT_DEBUG + ($INDEX * $PORT_OFFSET)))
FORWARD_PORT_DB=$(($PORT_DB + ($INDEX * $PORT_OFFSET)))
FORWARD_PORT_WILDFLY=$(($PORT_WILDFLY + ($INDEX * $PORT_OFFSET)))

VAGRANT_SSH="${VAGRANT_SSH:-}"
SET_ALIAS="source <(ID=${ID} DB_NAME=${DB_NAME} DB_USER=${DB_USER} DB_PASSWORD=${DB_PASSWORD} DB_DUMP=${DB_DUMP} ${UNIX_PROJECT_PATH}/scripts/template_engine.sh ${UNIX_PROJECT_PATH}/templates/alias.template)"

# Setup

DOCKER_SETUP_PROVIDE_VAR_DIRECTORY="docker exec ${ID} bash /usr/local/bin/docker_provide_var_directory.sh"

# Development
DOCKER_DEVELOPMENT_UNDEPLOY="docker exec ${ID} bash /usr/local/bin/docker_undeploy.sh"
DOCKER_DEVELOPMENT_DEPLOY="docker exec ${ID} bash /usr/local/bin/docker_deploy.sh"
DOCKER_DEVELOPMENT_REDEPLOY="docker exec ${ID} bash /usr/local/bin/docker_redeploy.sh"

# Database
DOCKER_DATABASE_INIT="${DOCKER_COMPOSE_BASE_COMMAND} exec -T ${DOCKER_COMPOSE_DB_SERVICE_NAME} bash /usr/local/bin/dbinit.sh"
DOCKER_DATABASE_INIT_MIGRATE_CONFIG="docker exec ${ID}_db bash -c 'cd /tmp/src/postgres/dumps && bash reset_test_data.sh -U ${DB_USER} -d ${DB_NAME} -f ${DB_DUMP} -L /tmp/pg_log ${OMS_SKIP_BUSINESS_CONFIG} -c en_US.utf8 -n'"
DOCKER_DATABASE_MIGRATE="docker exec ${ID}_db bash ${DATABASE_MIGRATE_PATH} -h localhost -U ${DB_USER} -p 5432 -d ${DB_NAME} -L /tmp/pg_log -n"
DOCKER_DATABASE_CREATE_DUMP="docker exec ${ID}_db bash -c \\\"cd /tmp/src/postgres/dumps && pg_dump -O -b -U oms_user -h localhost -p 5432 -d oms_db -n admin -n oms -n customer -n omt -n product -n system -n testcases -n bizconf |sed 's/^REVOKE ALL ON SCHEMA/--REVOKE ALL ON SCHEMA/g' |sed 's/^GRANT ALL ON SCHEMA/--GRANT ALL ON SCHEMA/g' |sed 's/^SET idle_in_transaction_session_timeout/-- SET idle_in_transaction_session_timeout/g' |gzip > ${ID}-\"'"'$(date "'+%Y-%m-%d-%H-%M-%S'")'"'\".dmp.gz\\\""
DOCKER_DATABASE_OPEN_PSQL_TERMINAL="docker run --network=${COMPOSE_PROJECT_NAME}_default -it --rm --link ${ID}_db:postgres ${DOCKER_DB_IMAGE} psql -h postgres -U ${DB_USER} -d ${DB_NAME}"

################################################################################
# Versioned commands and variables
#
# The following section defines commands and variables that could only be
# defined in a context of a specific version of a docker image.
################################################################################

# IOM-7111
# IOM-7183
# available for images >= 2.1.11.0, 2.2.3.0, 2.3.0.0
if (( version_ge $DOCKER_IOM_IMAGE_VERSION 2.1.11.0 ) && ( version_lt $DOCKER_IOM_IMAGE_VERSION 2.2.0.0 )) ||
   (( version_ge $DOCKER_IOM_IMAGE_VERSION 2.2.3.0 ) && ( version_lt $DOCKER_IOM_IMAGE_VERSION 2.3.0.0 )) ||
   ( version_ge $DOCKER_IOM_IMAGE_VERSION 2.3.0.0 )
then
  # IOM-7111
  DOCKER_SETUP_RECONFIGURE="docker exec ${ID} bash /usr/local/bin/docker_reconfigure.sh --wsdl-host=${HOST_IOM} --wsdl-port=${FORWARD_PORT_IOM}"

  # IOM-7183
  # IOM-8813
  if ( version_lt $DOCKER_IOM_IMAGE_VERSION 2.12.0.0 )
  then
    DOCKER_SETUP_PROVIDE_VAR_DIRECTORY_DOKU_PASSAGE="
# Make the fully orchestrated OMS_VAR directory accessible<span class=\"collapse setup--initialize-reconfigure-aliases\"># alias ${DOCKER_SETUP_PROVIDE_VAR_DIRECTORY_ALIAS}=\"${DOCKER_SETUP_PROVIDE_VAR_DIRECTORY}\"</span>
${DOCKER_SETUP_PROVIDE_VAR_DIRECTORY_ALIAS}
 "
  fi

DOCKER_SETUP_PROVIDE_VAR_DIRECTORY_ALIAS_PASSAGE="alias ${DOCKER_SETUP_PROVIDE_VAR_DIRECTORY_ALIAS}=\"${DOCKER_SETUP_PROVIDE_VAR_DIRECTORY}\""

else
  # IOM-7111
  DOCKER_SETUP_RECONFIGURE="docker exec ${ID} bash /usr/local/bin/docker_reconfigure.sh"
fi

# IOM-7205
# available for images >= 2.1.11.0, 2.2.4.0, 2.3.0.0
if (( version_ge $DOCKER_IOM_IMAGE_VERSION 2.1.11.0 ) && ( version_lt $DOCKER_IOM_IMAGE_VERSION 2.2.0.0 )) ||
   (( version_ge $DOCKER_IOM_IMAGE_VERSION 2.2.4.0 ) && ( version_lt $DOCKER_IOM_IMAGE_VERSION 2.3.0.0 )) ||
   ( version_ge $DOCKER_IOM_IMAGE_VERSION 2.3.0.0 )
then
  # IOM-7205
  DOCKER_SETUP_RECONFIGURE="docker exec ${ID} bash /usr/local/bin/docker_reconfigure.sh --wsdl-host=${HOST_IOM} --wsdl-port=${FORWARD_PORT_IOM} --timezone=${TIMEZONE}"
fi


# >= 2.2.0.0
if ( version_ge $DOCKER_IOM_IMAGE_VERSION 2.2.0.0 )
then
  CLUSTER_PROPERTIES_DB_HOST_CONFIG="/system-property=is.oms.db.hostlist: \"postgres:${PORT_DB}\""

  OMT_URL="http://${HOST_IOM}:${FORWARD_PORT_IOM}/omt"
else
  CLUSTER_PROPERTIES_DB_HOST_CONFIG="/system-property=is.oms.db.host: \"postgres\"
/system-property=is.oms.db.port: \"${PORT_DB}\""

  OMT_URL="http://${HOST_IOM}:${FORWARD_PORT_IOM}/bakery.omt"
fi

# IOM-8813
# >= 2.12.0.0
if ( version_ge $DOCKER_IOM_IMAGE_VERSION 2.12.0.0 )
then
  COMPOSE_ETC_DIR=/etc/opt/oms.cluster
  COMPOSE_APP_DIR=/opt/oms.cluster/application
  COMPOSE_LOG_DIR=/var/opt/oms.log
  COMPOSE_VAR_DIR=/var/opt/oms.cluster
  COMPOSE_SHARE_DIR="- $SHARE_DIR:/var/opt/oms.share"
fi
