#!/bin/bash
#set -x

usage() {
    ME=$(basename $0)
    cat <<EOF
$ME
    creates a new dockerized IOM

SYNOPSIS
    $ME <config-file>

DESCRIPTION
    Reads <config-file> to create a new dockerized IOM. The name of <config-file>
    will be used as ID of the newly created container.
EOF
}

# updates value of requested property in cluster.properties
updateDBHostlist() {
    PROPERTIES_FILE="$1/cluster.properties"
    PROPERTY_KEY="is.oms.db.hostlist"
    PROPERTY_VALUE="postgres:5432"

    # get line containing the requested property:
    # ignore property name inside comments
    # quote all regex special chars in property name
    # if more than one line was found, last wins
    PROP_QUOTED=$(echo "$PROPERTY_KEY" | sed -e 's/\./\\./g')
    LINE=$(grep "^[ \t]*/system-property=$PROP_QUOTED[ \t]*:" "$PROPERTIES_FILE" | tail -n 1)

    # extract value from line
    OLD_PROPERTY_VALUE=$(echo "$LINE" | sed -e 's/^[^:]*:[ \t]*"\([^"]*\).*/\1/g')

    # comment old property, add new line with new property value
    if [ "$OLD_PROPERTY_VALUE" != "$PROPERTY_VALUE" ]; then
	sed -e "s|^$(echo "$LINE" | sed -e 's/\./\\./g')|# $LINE|g" < "$PROPERTIES_FILE" > "$PROPERTIES_FILE.tmp$$" &&
	echo '/system-property=is.oms.db.hostlist: "postgres:5432"' >> "$PROPERTIES_FILE.tmp$$" &&
	mv "$PROPERTIES_FILE.tmp$$" "$PROPERTIES_FILE"
    fi || false
}

# $1 is name of the config-file
CONFIG_FILE=$1
shift

KEEP_DB_CONFIG=0

for OPT in "$@"; do
    case $OPT in
        --keep-db-config)
            KEEP_DB_CONFIG=1
            shift
            ;;
        *)  echo "invalid option $OPT" 1>&2
            echo 1>&2
            usage 1>&2
            exit 1
            ;;
    esac
done

# check config-file
if [ -z "$CONFIG_FILE" -o ! -f "$CONFIG_FILE" ]; then
    echo "config-file missing!" 1>&2
    echo 1>&2
    usage 1>&2
    exit 1
fi

# check syntax of $CONFIG_FILE
if ! ( set -e; . $CONFIG_FILE ); then
    echo "error reading '$CONFIG_FILE'" 1>&2
    exit 1
fi

# read $CONFIG_FILE
. $CONFIG_FILE

# check properties
if [ -z "$ETC_DIR" -o ! -d "$ETC_DIR" ]; then
    echo "ETC_DIR is not a valid directory: '$ETC_DIR'" 1>&2
    exit 1
elif [ -z "$LOG_DIR" -o ! -d "$LOG_DIR" ]; then
    echo "LOG_DIR is not a valid directory: '$LOG_DIR'" 1>&2
    exit 1
elif [ -z "$SRC_DIR" -o ! -d "$SRC_DIR" ]; then
    echo "SRC_DIR is not a valid directory: '$SRC_DIR'" 1>&2
    exit 1
elif [ -z "$APP_DIR" -o ! -d "$APP_DIR" ]; then
    echo "APP_DIR is not a valid directory: '$APP_DIR'" 1>&2
    exit 1
elif [ ! -z "$PGDATA_DIR" -a ! -d "$PGDATA_DIR" ]; then
    echo "PGDATA_DIR is not a valid directory: '$PGDATA_DIR'" 1>&2
    exit 1
elif [ -z "$DUMP" -o ! -f "$SRC_DIR/postgres/dumps/$DUMP" ]; then
    echo "DUMP is not a valid file in $SRC_DIR/postgres/dumps: '$DUMP'" 1>&2
    exit 1
elif [ -z "$PG_IMAGE" ]; then
    echo "PG_IMAGE must not be empty" 1>&2
    exit 1
elif [ -z "IOM_IMAGE" ]; then
    echo "IOM_IMAGE must not be empty" 1>&2
    exit 1
fi

ID=$(basename $CONFIG_FILE)

if [ "$KEEP_DB_CONFIG" -ne 1 ]; then
    updateDBHostlist "$ETC_DIR" || {
	echo "error updating is.oms.db.hostlist in $ETC_DIR/cluster.properties" 1>&2
	exit 1
    }
fi

# start the IOM container
set -x
docker run --privileged -d \
       -v $ETC_DIR:/etc/opt/oms.standalone \
       -v $LOG_DIR:/var/opt/oms.standalone/log \
       -v $APP_DIR:/opt/oms.standalone/application \
       -p 8080:8080 \
       -p 9990:9990 \
       -p 8787:8787 \
       -p 21:21 \
       -p 30000-30009:30000-30009 \
       --link ${ID}_db:postgres \
       --name $ID \
       rnd-docker-dev.test.intershop.de/$IOM_IMAGE
